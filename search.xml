<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Adobe Photoshop CC2019 精简安装版]]></title>
    <url>%2F2019%2FSoft_1%2F</url>
    <content type="text"><![CDATA[软件简介 Adobe Photoshop - 全球最大的图像处理软件，知名的图像及照片后期处理大型专业软件。Adobe® Photoshop® CC 是 Adobe Creative Cloud 创意云应用程序产品里的专业图片处理编辑软件，Photoshop CC 依然是数字图象处理和编辑的业界标准，提供广泛的专业级润饰工具套件，并集成了专为激发灵感而设计的强大编辑功能。Adobe Photoshop CC 让你享有更多的自由、速度和功能，让令人惊叹的图像栩栩如生。 截图 此版の说明 by roustar31 +采用官方安装包进行安装和制作 +集成补丁，直接破解激活 +完整保留官方滤镜和特效文件及输出输入支持文件 +添加ICO格式支持文件用以打开导出ICO文件 +可选关联官方支持的PS专用文件格式 +安装完成自动激活，无需注册码和屏蔽激活服务器，不写host +卸载不会删除Adobe公共文件夹，确保卸载不影响其他Adobe软件 +可选择启用PSD缩略图功能，支持32/64位系统 +改进安装脚本的细节，完善逻辑 +扩展功能和新版界面界面改为可选择安装 +导出功能以及文件信息功能正常 -精简了多国语言、帮助文件、多国PDF文件、CC Service Manager -精简了语言拼写组件、多余的多国语言预置文件 -精简了Common Files下Adobe公共库文件的无用部分，只留必须的核心 -精简了含视频输入支持 -精简了bridge CC -不包含任何捆绑和主页选项，完全纯净 特别说明 不能启动或是启动报错 请下载运行库 https://pan.baidu.com/s/18RCeiFMo9Eg_VWt8jyIOxA 提取码: 2333 下载地址 百度云: https://pan.baidu.com/s/16ASTdPDfxJpMnJUWHJrUEQ 提取码: 2333]]></content>
      <categories>
        <category>办公工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Adobe Premiere Pro CC 2018/2017 精简安装版]]></title>
    <url>%2F2019%2FSoft_2%2F</url>
    <content type="text"><![CDATA[先说软件简介👻 Adobe Premiere Pro 简称“PR”，是一款专业的视频编辑软件，数字视频剪辑软件。主要用来编辑视频和音频，可以在RGB和YUV色彩空间中以高达32位色彩的视频分辨率对4K和更高质量的视频文件进行编辑，支持VST音频插件和音轨5.1环绕声，支持沉浸式360/VR视频，基于非线性编辑的软件。Premiere Pro插件架构可以导入和导出QuickTime或DirectShow文件，支持MacOS和Windows大部分视频和音频格式。 软件截图 此版の介绍 by roustar31 #基于官方版本制作，无需注册码和补丁 #只精简了多国语言和多国拼写纠错文件，保留其他文件 #安装包，方便携带可自行解压到任意地方 特别提醒： 不能运行或者运行错误 下载VC运行库 https://pan.baidu.com/s/18RCeiFMo9Eg_VWt8jyIOxA 提取码: 2333 下载地址 链接: https://pan.baidu.com/s/1V3SpRVyzvb8pg6mIQBGzoA 提取码: 2333]]></content>
      <categories>
        <category>办公工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[汇编语言3->loop和指令的处理]]></title>
    <url>%2F2019%2Fasm_3%2F</url>
    <content type="text"><![CDATA[1.汇编语言中循环的实现 代码 123456789101112assume cs:codecode segment mov ax,0 mov cx,123 s:add ax,236 loop s mov ax,4c00h int 21h code endsend 编译运行 循环处不能一直单步下去，循环123次，手怕是要费了🙄， 直接-p 或者 通过-u 查看地址 然后 -g 走出来 结果の结果🤔 2.汇编源程序中,数据不能以字母开头🌚 ①疑问三连😏 ②实践检验 通过考虑16位寄存器和8位字节的问题，可知代码 123456789101112131415161718assume cs:iceice segment mov ax,0ffffh mov ds,ax mov bx,6 mov ah,0 mov al,[bx] mov cx,3 s: add dx,ax loop s mov ax,4c00h int 21hice endsend 我觉得不考虑好像也可以,但是可能出错 12345678910111213141516171819assume cs:codecode segment mov ax,0ffffh mov ds,ax mov bx,6 mov ax,[bx] mov ah,0 mov cx,3 mov dx,0 s:add dx,ax loop s mov ax,4c00h int 21hcode endsend 3.Debug 和 masm对指令的不同处理🤥 ①debug中的 mov al,[0] 会默认是 ②在masm的 mov al,[0] 结果 综上发现是对[idata] 的处理方式不同debug 在&quot; [ ] &quot;直接给出偏移地址的内存地址，而在masm 中将[idata]认为成 idata 所以在masm中 不能直接[idata]，应该在前面加上段地址寄存器 回想 WDNM，这几天我在干啥，鸽了好久赶紧补上😪]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[汇编笔记2-查看PSP]]></title>
    <url>%2F2019%2Fasm_2%2F</url>
    <content type="text"><![CDATA[1.指令基础QAQ debug -r //查看CPU中各个寄存器的中的内容 debug -r ax //改变寄存器中的内容 debug -d（段地址：偏移地址） //查看内存中的内容 D命令，Debug 将输出3部分内容 ①从指定地址的开始的128个内存单元的内容 ②左边是每行的起始地址 ③右边是每个内存单元中的数据对应的可显示的ASCII字符 从1000:16到 1000:95也是128个字节。 debug -d 段地址：起始偏移地址 结尾偏移地址 //查看内存的其他方式 debug -e //改写内存中的内容 方法一 直接在内存空间后面写修改的内存 方法二 -e 地址 之后直接回车 然后写完第一个之后空格 结束回车 方法三 可以直接写入字符串 debug -u //将原有内容翻译为汇编指令 2.程序PSP的相关知识 一般来说，PSP是256个字节，当程度生成了可执行文件以后，在执行的时候，先将程序调入内存，这个时候DS中存入程序在内存中的段地址，紧接着是程序的一些说明，比如说程序占用多大空间等等，这就是PSP，一般PSP占256个字节，然后才是真正的程序地址，将CS指向这里，IP设为0000，为什么一般CS要比DS大10H，就是因为这个原因。 简单说：DS存放的是程序段地址，由于PSP的存在，真正要执行的地址是DS再加上256个字节，真正的地址是DS16+256化简一下：DS16+0+1616=16（DS+16）真正的地址又可以写成：cs*16+0 3.调试T1.exe程序 由2可知调试程序PSP的地址就是DS的地址 查看075C处的内容可知PSP的内容 总结 知识相辅相成，缺一不可，温故而知新,可以为师矣🙃]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[汇编语言->课后题]]></title>
    <url>%2F2019%2Fasm_1%2F</url>
    <content type="text"><![CDATA[1.完成Codesg代码 1234567891011121314151617181920assume cs:codesgcodesg segment mov ax,2000h mov ss,ax mov sp,0 add sp,10 pop ax pop bx push ax push bx pop ax pop bx mov ax,4c00h int 21hcodesg endsend 2.Debug 编译 🤕忽略自己蛋疼的mini错误 3.Debug 单步调试,并且分析寄存器的变化 初始AX =FFFF DS=075C -&gt;可知PSP=075C：0 程序地址为 076C:0 CS:IP =076C:0000 单步后 AX=2000 CS:IP=176C:0003 —&gt;SS=2000—&gt; pop ax 之后 ax=0000 看到INT 21 -P 正常退出 q退出debug ✍整个过程中 POP 使 SP变大,Push 将使 SP变小，因为一次是一个字型数据所以说，变化为2。 4.总结 感觉还是对__空栈的概念的理解__吧，及时AX,BX是空栈，PUSH POP 入栈和出栈都会进行指针的变化，说白了栈就是SS:SP指向的内存空间，移动按照规律，而不是去判断是否为空栈。 栈空间里没有内容，此时能弹堆栈？ 首先说什么是栈空间，栈空间无非是一段由SS:SP指示的内存空间而已，一般情况下我们能够用栈操作指令访问它，当然，我们也可以用访问内存地址的任何一种合理方式访问这段空间。其次，我们说 栈空 表明的意思是：栈顶设置之初，我们没有栈操作的时候，这段空间的数据我们是未知的，所以通常也是没有用的，但是并不代表这时栈顶SS:SP所指向的内存字单元中没有数据！再有一点：无论是push还是pop操作，栈的操作在任何情况下都是有效的（但不一定在任何情况下都是合理的，对于不合理的栈操作正如问题 1 的回答中所讲，会有操作系统的干预。）]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[快快快速排序]]></title>
    <url>%2F2019%2Fthree-sf%2F</url>
    <content type="text"><![CDATA[简单の的介绍QAQ啊 快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔（图领奖得主）提出。快速排序使用分治法策略来把一个序列分为两个序列。 分治法（快速排序）的主要步骤🐱 从数列中挑出一个元素，称为「基准」（pivot）。 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分割结束之后，该基准就处于数列的中间位置。 递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。 图解🤔 重点: 必须清楚第一趟排序之后的结果 上代码啊👑 12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;int QuickSort(int n[],int left,int right)&#123; int mid=(left+right)/2; int temp,j,i,middle=n[mid]; i=left; j=right; while (j&gt;=i)&#123; while(middle&gt;n[i])&#123; i++; &#125; while(middle&lt;n[j])&#123; j--; &#125; if(i&lt;=j)&#123; temp=n[i]; n[i]=n[j]; n[j]=temp; i++; j--; &#125; &#125; if(i&lt;right)&#123; QuickSort(n,i,right); &#125; if(j&gt;left)&#123; QuickSort(n,left,j); &#125;&#125;int main()&#123; int s,a[]=&#123;4,1,2,45,21,1,2,3,3,1,3,14,1,1,14,12,4&#125;; int length=sizeof(a)/sizeof(a[0]); QuickSort(a,0,length-1); for(s=0;s&lt;length;s++)&#123; printf("%d ",a[s]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[单链表求阶层和]]></title>
    <url>%2F2019%2Ftwo-sf%2F</url>
    <content type="text"><![CDATA[老规矩先上题QAQ 难度 :★ 思之の路 链表的应用 简单的循环 Code 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct Node *PtrToNode;struct Node &#123; int Data; PtrToNode Next;&#125;;typedef PtrToNode List; int FactorialSum( List L );int main()&#123; int N, i; List L, p; scanf("%d", &amp;N); L = NULL; for ( i=0; i&lt;N; i++ ) &#123; p = (List)malloc(sizeof(struct Node)); scanf("%d", &amp;p-&gt;Data); p-&gt;Next = L; L = p; &#125; printf("%d\n", FactorialSum(L)); return 0;&#125;int FactorialSum(List L)&#123; int a=0,temp=0,t2; while(L)&#123; temp=L-&gt;Data; t2=1; for(;temp&gt;0;temp--)&#123; t2=temp * t2; &#125; a+=t2; L=L-&gt;Next; &#125; return a;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[多项式的计算]]></title>
    <url>%2F2019%2Fone-sf%2F</url>
    <content type="text"><![CDATA[先上题，炒鸡简单！ 难度:✯ 思の路 按照多项式的方程，直接写个对应的函数 直接上代码 JAVA代码 1234567891011121314151617181920212223242526import java.util.Scanner;public class Main&#123; public static void main(String [] args)&#123; Scanner S1=new Scanner(System.in); int s; double sum,as,a[]=new double[100]; s=S1.nextInt(); as=S1.nextDouble(); for (int ice=0;ice&lt;=s;ice++)&#123; a[ice]=S1.nextDouble(); &#125; SSS S2=new SSS(); sum=S2.Calcu(s,a,as); System.out.println(sum); &#125;&#125;class SSS&#123; double Calcu(int n,double a[],double x)&#123; double sum=0; for(int asd=0;asd&lt;=n;asd++)&#123; sum+=a[asd]*Math.pow(x,asd); &#125; return sum; &#125;&#125; C的代码 12345678910111213141516171819202122232425#include &lt;stdio.h&gt;#define MAXN 10double f( int n, double a[], double x );int main()&#123; int n, i; double a[MAXN], x; scanf("%d %lf", &amp;n, &amp;x); for ( i=0; i&lt;=n; i++ ) scanf(“%lf”, &amp;a[i]); printf("%.1f\n", f(n, a, x)); return 0;&#125;double f(int n,double a[],double x)&#123; int s=1; double sum=a[0]; for(;s&lt;=n;s++)&#123; sum+=a[s]*pow(x,s); &#125; return sum;&#125; 总结 还是多练习，多复习]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Start]]></title>
    <url>%2F2019%2FHi%2F</url>
    <content type="text"><![CDATA[Test_Java 1234567```javapublic class Main()&#123; public static void main(String [] args)&#123; System.out.println("Hi ! guys !"); &#125;&#125;``` Test_cpp 123456#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hi Boy"&lt;&lt;endl; return 0;&#125; Test_C 12345#include&lt;stdio.h&gt;int main()&#123; printf("Hi gay !"); return 0;&#125;]]></content>
      <categories>
        <category>随心笔记</category>
      </categories>
  </entry>
</search>
